{"ast":null,"code":"var defaultOptions = {\n  delay: 4000,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false\n};\nfunction Autoplay(userOptions, userNode) {\n  var options = Object.assign({}, defaultOptions, Autoplay.globalOptions, userOptions);\n  var playOnInit = options.playOnInit,\n    stopOnInteraction = options.stopOnInteraction,\n    stopOnMouseEnter = options.stopOnMouseEnter,\n    stopOnLastSnap = options.stopOnLastSnap,\n    delay = options.delay;\n  var interaction = stopOnInteraction ? destroy : stop;\n  var carousel;\n  var timer = 0;\n  function init(embla) {\n    carousel = embla;\n    var eventStore = carousel.internalEngine().eventStore;\n    var emblaRoot = carousel.rootNode();\n    var root = userNode && userNode(emblaRoot) || emblaRoot;\n    carousel.on('pointerDown', interaction);\n    if (!stopOnInteraction) carousel.on('pointerUp', reset);\n    if (stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction);\n      if (!stopOnInteraction) eventStore.add(root, 'mouseleave', reset);\n    }\n    eventStore.add(document, 'visibilitychange', function () {\n      if (document.visibilityState === 'hidden') return stop();\n      reset();\n    });\n    eventStore.add(window, 'pagehide', function (event) {\n      if (event.persisted) stop();\n    });\n    if (playOnInit) play();\n  }\n  function destroy() {\n    carousel.off('pointerDown', interaction);\n    if (!stopOnInteraction) carousel.off('pointerUp', reset);\n    stop();\n    timer = 0;\n  }\n  function play() {\n    stop();\n    timer = window.setTimeout(next, delay);\n  }\n  function stop() {\n    if (!timer) return;\n    window.clearTimeout(timer);\n  }\n  function reset() {\n    if (!timer) return;\n    stop();\n    play();\n  }\n  function next() {\n    var index = carousel.internalEngine().index;\n    var kill = stopOnLastSnap && index.get() === index.max;\n    if (kill) return destroy();\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext();\n    } else {\n      carousel.scrollTo(0);\n    }\n    play();\n  }\n  var self = {\n    name: 'Autoplay',\n    options: options,\n    init: init,\n    destroy: destroy,\n    play: play,\n    stop: stop,\n    reset: reset\n  };\n  return self;\n}\nAutoplay.globalOptions = undefined;\nexport default Autoplay;","map":{"version":3,"mappings":"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","names":["defaultOptions","delay","playOnInit","stopOnInteraction","stopOnMouseEnter","stopOnLastSnap","Autoplay","userOptions","userNode","options","Object","assign","globalOptions","interaction","destroy","stop","carousel","timer","init","embla","internalEngine","emblaRoot","rootNode","root","on","reset","eventStore","add","document","visibilityState","window","event","persisted","play","off","setTimeout","next","clearTimeout","kill","index","get","max","canScrollNext","scrollNext","scrollTo","self","name","undefined"],"sources":["/Users/atharvthaker/Documents/GitHub/atharv-website/node_modules/embla-carousel-autoplay/src/components/Options.ts","/Users/atharvthaker/Documents/GitHub/atharv-website/node_modules/embla-carousel-autoplay/src/components/index.ts"],"sourcesContent":["export type OptionsType = {\n  delay: number\n  playOnInit: boolean\n  stopOnInteraction: boolean\n  stopOnMouseEnter: boolean\n  stopOnLastSnap: boolean\n}\n\nexport const defaultOptions: OptionsType = {\n  delay: 4000,\n  playOnInit: true,\n  stopOnInteraction: true,\n  stopOnMouseEnter: false,\n  stopOnLastSnap: false,\n}\n\nexport type AutoplayOptionsType = Partial<OptionsType>\n","import { defaultOptions, AutoplayOptionsType, OptionsType } from './Options'\nimport { EmblaCarouselType, EmblaPluginType } from 'embla-carousel'\n\nexport type AutoplayType = EmblaPluginType<OptionsType> & {\n  play: () => void\n  stop: () => void\n  reset: () => void\n}\n\nfunction Autoplay(\n  userOptions?: AutoplayOptionsType,\n  userNode?: (emblaRoot: HTMLElement) => HTMLElement | null,\n): AutoplayType {\n  const options = Object.assign(\n    {},\n    defaultOptions,\n    Autoplay.globalOptions,\n    userOptions,\n  )\n  const {\n    playOnInit,\n    stopOnInteraction,\n    stopOnMouseEnter,\n    stopOnLastSnap,\n    delay,\n  } = options\n  const interaction = stopOnInteraction ? destroy : stop\n  let carousel: EmblaCarouselType\n  let timer = 0\n\n  function init(embla: EmblaCarouselType): void {\n    carousel = embla\n    const { eventStore } = carousel.internalEngine()\n    const emblaRoot = carousel.rootNode()\n    const root = (userNode && userNode(emblaRoot)) || emblaRoot\n\n    carousel.on('pointerDown', interaction)\n    if (!stopOnInteraction) carousel.on('pointerUp', reset)\n\n    if (stopOnMouseEnter) {\n      eventStore.add(root, 'mouseenter', interaction)\n      if (!stopOnInteraction) eventStore.add(root, 'mouseleave', reset)\n    }\n\n    eventStore.add(document, 'visibilitychange', () => {\n      if (document.visibilityState === 'hidden') return stop()\n      reset()\n    })\n    eventStore.add(window, 'pagehide', (event: PageTransitionEvent) => {\n      if (event.persisted) stop()\n    })\n\n    if (playOnInit) play()\n  }\n\n  function destroy(): void {\n    carousel.off('pointerDown', interaction)\n    if (!stopOnInteraction) carousel.off('pointerUp', reset)\n    stop()\n    timer = 0\n  }\n\n  function play(): void {\n    stop()\n    timer = window.setTimeout(next, delay)\n  }\n\n  function stop(): void {\n    if (!timer) return\n    window.clearTimeout(timer)\n  }\n\n  function reset(): void {\n    if (!timer) return\n    stop()\n    play()\n  }\n\n  function next(): void {\n    const { index } = carousel.internalEngine()\n    const kill = stopOnLastSnap && index.get() === index.max\n\n    if (kill) return destroy()\n\n    if (carousel.canScrollNext()) {\n      carousel.scrollNext()\n    } else {\n      carousel.scrollTo(0)\n    }\n    play()\n  }\n\n  const self: AutoplayType = {\n    name: 'Autoplay',\n    options,\n    init,\n    destroy,\n    play,\n    stop,\n    reset,\n  }\n  return self\n}\n\nAutoplay.globalOptions = <AutoplayOptionsType | undefined>undefined\n\nexport default Autoplay\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}